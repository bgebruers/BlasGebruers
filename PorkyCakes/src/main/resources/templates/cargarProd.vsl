
  <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700" rel="stylesheet">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css"
    integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
  <title>Cargar Producto</title>
  <style>
    html,
    body {
      min-height: 100%;
    }

    body,
    div,
    form,
    input,
    select,
    textarea,
    label {
      padding: 0;
      margin: 0;
      outline: none;
      font-family: 'Times New Roman', Times, serif;
      font-size: 14px;
      color: #666;
      line-height: 22px;
    }

    h1 {
      position: center;
      margin: 0;
      font-size: 60px;
      color: #fff;
      z-index: 2;
      line-height: 83px;
      top: 30px;
    }

    legend {
      padding: 10px;
      font-family: Roboto, Arial, sans-serif;
      font-size: 18px;
      color: #fff;
      background-color: rgb(234, 137, 154);
      ;
    }

    textarea {
      width: calc(100% - 12px);
      padding: 5px;
    }

    .testbox {
      display: flex;
      justify-content: center;
      align-items: center;
      height: inherit;
      padding: 20px;
    }

    form {
      width: 100%;
      padding: 20px;
      border-radius: 6px;
      background: #fff;
      box-shadow: 0 0 8px #920219;
    }

    .banner {
      position: relative;
      height: 150px;
      background-size: cover;
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
    }

    .banner::after {
      content: "";
      background-color: rgb(234, 137, 154);
      position: absolute;
      width: 100%;
      height: 100%;
    }

    input,
    select,
    textarea {
      margin-bottom: 10px;
      border: 1px solid #ccc;
      border-radius: 3px;
    }

    input {
      width: calc(100% - 10px);
      padding: 5px;
    }

    input[type="date"] {
      padding: 4px 5px;
    }

    textarea {
      width: calc(100% - 12px);
      padding: 5px;
    }

    .item:hover p,
    .item:hover i,
    .question:hover p,
    .question label:hover,
    input:hover::placeholder {
      color: #006622;
    }

    .checkbox input[type=checkbox] {
      display: inline-block;
      height: 15px;
      width: 15px;
      margin-right: 5px;
      vertical-align: text-top;
    }

    .item input:hover,
    .item select:hover,
    .item textarea:hover {
      border: 1px solid transparent;
      box-shadow: 0 0 3px 0 #006622;
      color: #006622;
    }

    .item {
      position: relative;
      margin: 10px 0;
    }

    .item span {
      color: red;
    }

    .week {
      display: flex;
      justify-content: space-between;
    }

    .container {
      display: flex;
      flex-direction: row-reverse;
      /* Reverse the order of elements */
      justify-content: space-between;
      align-items: flex-start;
      /* Align items to the top */
    }

    .colums {
      display: flex;
      justify-content: space-between;
      flex-direction: column;
      flex-wrap: wrap;
    }

    input[type=radio],
    input[type=checkbox] {
      display: none;
    }

    label.radio {
      position: relative;
      display: inline-block;
      margin: 5px 20px 15px 0;
      cursor: pointer;
    }

    .question span {
      margin-left: 30px;
    }

    .question-answer label {
      display: block;
    }

    label.radio:before {
      content: "";
      position: absolute;
      left: 0;
      width: 17px;
      height: 17px;
      border-radius: 50%;
      border: 2px solid #ccc;
    }

    input[type=radio]:checked+label:before,
    label.radio:hover:before {
      border: 2px solid #006622;
    }

    label.radio:after {
      content: "";
      position: absolute;
      top: 6px;
      left: 5px;
      width: 8px;
      height: 4px;
      border: 3px solid #006622;
      border-top: none;
      border-right: none;
      transform: rotate(-45deg);
      opacity: 0;
    }

    input[type=radio]:checked+label:after {
      opacity: 1;
    }

    .file-input-container {
      position: relative;
      display: inline-block;
    }

    .file-input {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      cursor: pointer;
      z-index: 2;
    }

    .file-input-label {
      display: inline-block;
      padding: 10px 20px;
      background-color: #007bff;
      color: #fff;
      border: 1px solid #007bff;
      border-radius: 5px;
      cursor: pointer;
      z-index: 1;
      transition: background-color 0.3s ease;
    }

    .file-input-label:hover {
      background-color: #0056b3;
    }

    .file-input-container,
    .colums {
      width: 100%;
    }

    .flax {
      display: flex;
      justify-content: space-around;
    }

    .btn-block {
      margin-top: 10px;
      text-align: center;
    }

    button {
      width: 150px;
      padding: 10px;
      border: none;
      border-radius: 5px;
      background: rgb(234, 137, 154);
      font-size: 16px;
      color: #fff;
      cursor: pointer;
    }

    button:hover {
      background: rgb(234, 137, 154);
    }

    @media (min-width: 568px) {

      .name-item,
      .city-item {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
      }

      .name-item input,
      .name-item div {
        width: calc(50% - 20px);
      }

      .name-item div input {
        width: 97%;
      }

      .name-item div label {
        display: block;
        padding-bottom: 5px;
      }
    }

    .file-input-label {
      background: transparent; 
      border: none; 
      padding: 0; 
    }

    .msg {
      color: $!color;
      /*funciona a pesar de q vsc lo marque como error*/
    }
  </style>

  <div class="testbox">
    <form id="formProducto">
      <div class="banner">
        <h1>Cargar Producto</h1>
      </div>
      <br />
      <fieldset>
        <div class="container">
          <div class="colums">
            <div class="item">
              <label for="nombre">Nombre del producto<span>*</span></label>
              <input id="nombre" name="nombre" type="text" placeholder="Torta de Chocolate"/>
            </div>
            <div class="desc">
              <label for="desc">Descripcion</label>
              <textarea id="description" name="descripcion" rows="3"></textarea>
            </div>
            <div class="cat">
              <label for="cat">Categor√≠a: </label>  
              <select id="categoria" name="categoria">
                #foreach ($c in $categorias)
                  <option value=$c.name()>$c.toString()</option>
                #end
              </select>
            </div>
            <div class="item">
              <label for="precio">Precio</label>
              <input id="precio" name="precio" type="number" />
            </div>
            <div class="item">
              <label for="tiempoElab">Tiempo de Elaboracion</label>
              <input id="tiempoElab" name="tiempoElab" type="text" placeholder="hh:mm"/>
            </div>
          </div>
          <div class="file-input-container">
            <input type="file" name="imagen" id="imageUpload" class="file-input" style="display: none;"
              onchange="previewImage()">
            <label for="imageUpload" class="file-input-label">
              <img id="imagePreview" src="/imagenes/insertImg.jpg" alt="Image Preview"
                style="max-width: 450px; max-height: 100%; cursor: pointer;">
            </label>
          </div>
        </div>
      </fieldset>
      <br />
      <div class="btn-block">
        <button type="submit" href="/">Confirmar</button>
      </div>
      <b class="msg" id="msgid">$!mensaje</b>
    </form>
  </div>

  <script>
    var xhr = new XMLHttpRequest();
    const productForm = document.getElementById('formProducto');

    productForm.addEventListener('submit', function (e) {
      e.preventDefault();

      // Create a FormData object to gather form data
      const formData = new FormData(productForm);

      // Convert the FormData object to a JSON object
      const formDataObject = {};
      formData.forEach((value, key) => {
        formDataObject[key] = value;
      });

      formDataObject.imagen = formDataObject.imagen.name;

      const apiUrl = 'http://localhost:4567/cargarProd';

      // Create the request object
      const requestOptions = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formDataObject),
      };

      // Send the POST request
      fetch(apiUrl, requestOptions)
        .then(response => {
          location.reload();
        });
    });
  </script>

  <script>
    function previewImage() {
      const input = document.getElementById('imageUpload');
      const imagePreview = document.getElementById('imagePreview');

      if (input.files && input.files[0]) {
        const reader = new FileReader();

        reader.onload = function (e) {
          imagePreview.src = e.target.result;
          imagePreview.style.display = 'block'; // Show the image preview
        };

        reader.readAsDataURL(input.files[0]);
      } else {
        imagePreview.src = '/imagenes/insertImg.jpg'; // Reset to the default example image
        imagePreview.style.display = 'block'; // Show the example image
      }
    }
  </script>